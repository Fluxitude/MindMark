var background=function(){"use strict";var c,s;function l(e){return e==null||typeof e=="function"?{main:e}:e}const m=l({main(){console.log("MindMark extension background script loaded"),chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"save-to-mindmark",title:"Save to MindMark",contexts:["page","link"]}),chrome.contextMenus.create({id:"save-link-to-mindmark",title:"Save Link to MindMark",contexts:["link"]})}),chrome.contextMenus.onClicked.addListener((o,r)=>{o.menuItemId==="save-to-mindmark"?e({url:(r==null?void 0:r.url)||"",title:(r==null?void 0:r.title)||"",favicon:r==null?void 0:r.favIconUrl}):o.menuItemId==="save-link-to-mindmark"&&o.linkUrl&&e({url:o.linkUrl,title:o.selectionText||o.linkUrl,favicon:void 0})});async function e(o){try{console.log("Saving bookmark:",o);const r=await chrome.storage.local.get("bookmarks")||{bookmarks:[]},n={...o,id:Date.now().toString(),createdAt:new Date().toISOString(),tags:[],summary:"AI summary pending..."};r.bookmarks=[...r.bookmarks||[],n],await chrome.storage.local.set({bookmarks:r.bookmarks}),chrome.notifications.create({type:"basic",iconUrl:"icon/48.png",title:"MindMark",message:`Bookmark saved: ${o.title}`})}catch(r){console.error("Failed to save bookmark:",r),chrome.notifications.create({type:"basic",iconUrl:"icon/48.png",title:"MindMark Error",message:"Failed to save bookmark. Please try again."})}}chrome.commands.onCommand.addListener(o=>{o==="save-current-page"&&chrome.tabs.query({active:!0,currentWindow:!0},r=>{const n=r[0];n!=null&&n.url&&(n!=null&&n.title)&&e({url:n.url,title:n.title,favicon:n.favIconUrl})})}),chrome.runtime.onMessage.addListener((o,r,n)=>{if(o.type==="SAVE_BOOKMARK")return e(o.bookmark).then(()=>n({success:!0})).catch(t=>n({success:!1,error:t.message})),!0;if(o.type==="GET_BOOKMARKS")return chrome.storage.local.get("bookmarks").then(t=>n({bookmarks:t.bookmarks||[]})).catch(t=>n({bookmarks:[],error:t.message})),!0})}});function k(){}((s=(c=globalThis.browser)==null?void 0:c.runtime)==null?void 0:s.id)==null?globalThis.chrome:globalThis.browser;function i(e,...o){}const u={debug:(...e)=>i(console.debug,...e),log:(...e)=>i(console.log,...e),warn:(...e)=>i(console.warn,...e),error:(...e)=>i(console.error,...e)};let a;try{a=m.main(),a instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(e){throw u.error("The background crashed on startup!"),e}return a}();
background;
